---
layout: post
title: Kapow - Renderer (Part 4)
---
<p>
In the late 80's and early 90's, when Real Mode was still in widespread use, the most common piece of graphics hardware found on a PC was the <a href="https://wiki.osdev.org/VGA_Hardware">VGA Chip</a>. To this day, practically every single GPU implements its functionality, and it is supported by most emulators, including QEMU. The card offers a variety of modes, but the most popular of them was the well-known <a href="https://en.wikipedia.org/wiki/Mode_13h">Mode 13h</a>.<br />
</p>

<div id="outline-container-orgd2be259" class="outline-2">
<h2 id="orgd2be259">Mode 13h</h2>
<div class="outline-text-2" id="text-orgd2be259">
<p>
Due to its relative ease of use through BIOS calls when in Real Mode, Mode 13h was chosen as the graphics mode for <i>Kapow</i>. It is easy to set by calling a BIOS interrupt in the following way:<br />
</p>
<div class="org-src-container">
<pre class="src src-nasm"><span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">ax</span>, <span style="color: #8470ff; font-weight: bold;">0x13</span>            
<span style="color: #b0c4de;">int</span> <span style="color: #8470ff; font-weight: bold;">0x10</span>                
</pre>
</div>
<p>
As can be seen here, Mode 13h gets its name from the value put into <code>ax</code> to set it, 13 hexadecimal.<br />
</p>
</div>
<div id="outline-container-orgfae5c7c" class="outline-3">
<h3 id="orgfae5c7c">Drawing</h3>
<div class="outline-text-3" id="text-orgfae5c7c">
<p>
Once this is done, the screen can be written to as a linear buffer, in the segment <code>0xA0000</code>. The screen is sized at 320x200 pixels, taking up an entire segment of memory (64 kilobytes). Each byte represents a single pixel, the value of which is an index in the palette, which will be discussed later.<br />
</p>

<p>
Since this is a linear framebuffer, the following equation could be used in order to draw a pixel at a certain x and y in the screen.<br />
</p>
\begin{equation}
o = x+y*320
\end{equation}
<p>
Where \(o\) is the offset from <code>0xA0000</code> and \(x\),\(y\) are your desired coordinates.<br />
</p>

<p>
From this equation, a function like this could be used in order to write a single pixel to a desired location:<br />
</p>
<div class="org-src-container">
<pre class="src src-nasm"><span style="color: #ff7f24; font-style: italic;">; Draws a pixel on the screen</span>
<span style="color: #ff7f24; font-style: italic;">; al - color</span>
<span style="color: #ff7f24; font-style: italic;">; bx - x-coordinate</span>
<span style="color: #ff7f24; font-style: italic;">; cx - y-coordinate</span>
<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">put_pixel</span>:
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">bp</span>, <span style="color: #7fffd4;">sp</span>

        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">ax</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">ax</span>, <span style="color: #8470ff; font-weight: bold;">320</span>
        <span style="color: #b0c4de;">mul</span> <span style="color: #7fffd4;">cx</span>
        <span style="color: #b0c4de;">add</span> <span style="color: #7fffd4;">bx</span>, <span style="color: #7fffd4;">ax</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">ax</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #8470ff; font-weight: bold;">0xA000</span> <span style="color: #ff7f24; font-style: italic;">; This is used to set the segment register, so only the last 4 bits are of use.</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">gs</span>, <span style="color: #7fffd4;">dx</span>
        <span style="color: #b0c4de;">mov</span> [<span style="color: #7fffd4;">gs</span>:<span style="color: #7fffd4;">bx</span>], <span style="color: #7fffd4;">al</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">sp</span>, <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">ret</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org89a5a0b" class="outline-3">
<h3 id="org89a5a0b">The Palette</h3>
<div class="outline-text-3" id="text-org89a5a0b">
<p>
As you might imagine, given that we are using one byte per pixel, that greatly limits the amount of color information we can use. If we were to use an RGB representation, for example, we would only have around 2.5 bits per component.<br />
</p>

<p>
In order to solve this, Mode 13h operates in something called indexed color mode, where the value of each byte represents not color information directly, but instead an index in an array of colors. By default, the BIOS loads some colors into the VGA chip, but if we want to use artwork of any quality, it is a good idea to customize the colors to our liking.<br />
</p>

<p>
Setting a color in the palette involves direct communication with the VGA card. This might sound complicated but in reality is quite simple. <i>Kapow</i> implements this in the following way:<br />
</p>
<div class="org-src-container">
<pre class="src src-nasm"><span style="color: #ff7f24; font-style: italic;">; Sets an index in a palette to a color</span>
<span style="color: #ff7f24; font-style: italic;">; ah - index</span>
<span style="color: #ff7f24; font-style: italic;">; bl - red (0-63)</span>
<span style="color: #ff7f24; font-style: italic;">; bh - green (0-63)</span>
<span style="color: #ff7f24; font-style: italic;">; cl - blue (0-63)</span>
<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">set_palette_index</span>:
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">bp</span>, <span style="color: #7fffd4;">sp</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">al</span>, <span style="color: #8470ff; font-weight: bold;">0xFF</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #8470ff; font-weight: bold;">0x3C6</span>           <span style="color: #ff7f24; font-style: italic;">; PEL Mask Register</span>
        <span style="color: #b0c4de;">out</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #7fffd4;">al</span>              <span style="color: #ff7f24; font-style: italic;">; Prepare VGA card for color change</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">al</span>, <span style="color: #7fffd4;">ah</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #8470ff; font-weight: bold;">0x3C8</span>           <span style="color: #ff7f24; font-style: italic;">; PEL Address Write Mode Register</span>
        <span style="color: #b0c4de;">out</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #7fffd4;">al</span>              <span style="color: #ff7f24; font-style: italic;">; Send what color index to write to</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #8470ff; font-weight: bold;">0x3C9</span>           <span style="color: #ff7f24; font-style: italic;">; PEL Data Register</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">al</span>, <span style="color: #7fffd4;">bl</span>
        <span style="color: #b0c4de;">out</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #7fffd4;">al</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">al</span>, <span style="color: #7fffd4;">bh</span>
        <span style="color: #b0c4de;">out</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #7fffd4;">al</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">al</span>, <span style="color: #7fffd4;">cl</span>
        <span style="color: #b0c4de;">out</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #7fffd4;">al</span>



        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">sp</span>, <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">ret</span>
</pre>
</div>
<p>
It is worth noting that when uploading colors into the palette, the VGA card only cares about the first 6 bits of the byte giving, discarding the last two. That is why their value is denoted as <code>0-63</code>.<br />
</p>

<p>
So for example, if we were to set index 163 to a color of our liking, whenever 163 is encountered in a byte in our framebuffer, it would be drawn as the color we specified.<br />
</p>
</div>
</div>

<div id="outline-container-org97b8b7f" class="outline-3">
<h3 id="org97b8b7f">VSync</h3>
<div class="outline-text-3" id="text-org97b8b7f">
<p>
If you were to directly write to the framebuffer and had moving elements, you would notice severe screen tearing. This can be solved by buffering the contents of your screen before writing it to the VGA chip, and synchronizing it to your to the video signal, to ensure no writing is done while screen is being refreshed.<br />
</p>

<p>
To do this, you must first write the screen's contents to another segment, for example <code>0x70000</code>, instead of directly to <code>0xA0000</code>. Then, you can copy the contents of the temporary buffer to the actual framebuffer.<br />
</p>

<p>
But before you write to the VGA's memory, you must make sure that the screen is not currently being refreshed. This can be done by querying the VGA card, and waiting if this is the case. This can be done in the following way:<br />
</p>
<div class="org-src-container">
<pre class="src src-nasm"><span style="color: #00fa9a; font-size: 110%; font-weight: bold;">vt_set</span>:
        <span style="color: #b0c4de;">in</span> <span style="color: #7fffd4;">al</span>, <span style="color: #7fffd4;">dx</span>
        <span style="color: #b0c4de;">and</span> <span style="color: #7fffd4;">al</span>, <span style="color: #8470ff; font-weight: bold;">8</span>
        <span style="color: #b0c4de;">jnz</span> vt_set

<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">vt_clr</span>:                  
        <span style="color: #b0c4de;">in</span> <span style="color: #7fffd4;">al</span>, <span style="color: #7fffd4;">dx</span>
        <span style="color: #b0c4de;">and</span> <span style="color: #7fffd4;">al</span>, <span style="color: #8470ff; font-weight: bold;">8</span>
        <span style="color: #b0c4de;">jz</span> vt_clr

</pre>
</div>

<p>
After that, to perform the copying, a routine similar to this one could be used:<br />
</p>
<div class="org-src-container">
<pre class="src src-nasm"><span style="color: #00fa9a; font-size: 110%; font-weight: bold;">copy_buffer</span>:
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">bp</span>, <span style="color: #7fffd4;">sp</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">cx</span>, <span style="color: #8470ff; font-weight: bold;">0x7000</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">ds</span>, <span style="color: #7fffd4;">cx</span>
        <span style="color: #b0c4de;">xor</span> <span style="color: #7fffd4;">si</span>, <span style="color: #7fffd4;">si</span>             <span style="color: #ff7f24; font-style: italic;">;ds:si = source</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">cx</span>, <span style="color: #8470ff; font-weight: bold;">0xa000</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">es</span>, <span style="color: #7fffd4;">cx</span>
        <span style="color: #b0c4de;">xor</span> <span style="color: #7fffd4;">di</span>, <span style="color: #7fffd4;">di</span>             <span style="color: #ff7f24; font-style: italic;">;es:di = destination</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">cx</span>, <span style="color: #8470ff; font-weight: bold;">32000</span>           <span style="color: #ff7f24; font-style: italic;">;32k words to fill the screen</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #8470ff; font-weight: bold;">0x3da</span>           <span style="color: #ff7f24; font-style: italic;">; VGA status register</span>

        <span style="color: #b0c4de;">rep</span> <span style="color: #b0c4de;">movsw</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">sp</span>, <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">ret</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org110b142" class="outline-2">
<h2 id="org110b142"><i>Kapow</i>'s Renderer</h2>
<div class="outline-text-2" id="text-org110b142">
</div>
<div id="outline-container-orgb745836" class="outline-3">
<h3 id="orgb745836">Drawing Sprites</h3>
<div class="outline-text-3" id="text-orgb745836">
<p>
In a game, it is very important to be able to draw sprites. One might even say, it is imperative. In order to draw a sprite, <i>Kapow</i> iterates through the sprite data and places pixel by pixel in the correct area. The value <code>0xFF</code> is taken as a transparent pixel and thus this value is not written. The code for this is as follows:<br />
</p>
<div class="org-src-container">
<pre class="src src-nasm"><span style="color: #ff7f24; font-style: italic;">; Draws a sprite</span>
<span style="color: #ff7f24; font-style: italic;">; ax - y-position</span>
<span style="color: #ff7f24; font-style: italic;">; bx - x-position</span>
<span style="color: #ff7f24; font-style: italic;">; ch - width</span>
<span style="color: #ff7f24; font-style: italic;">; cl - height</span>
<span style="color: #ff7f24; font-style: italic;">; dx - sprite location</span>
<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">draw_sprite</span>:
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">bp</span>, <span style="color: #7fffd4;">sp</span>

        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">dx</span> <span style="color: #ff7f24; font-style: italic;">; Save sprite location</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dx</span>, screen_width
        <span style="color: #b0c4de;">mul</span> <span style="color: #7fffd4;">dx</span> <span style="color: #ff7f24; font-style: italic;">; Multiply y position with screen width (320), to get offset</span>
        <span style="color: #b0c4de;">add</span> <span style="color: #7fffd4;">bx</span>, <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Add offset to x, to get absolute start location</span>

        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">ax</span>, vga_mem
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">es</span>, <span style="color: #7fffd4;">ax</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">ax</span>, sprite_<span style="color: #63b8ff;">seg</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">gs</span>, <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Set up segments where transfers will occur. From sprite_seg to vga_mem</span>

        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Put saved sprite location in ax</span>
        <span style="color: #b0c4de;">xor</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #7fffd4;">dx</span> 
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">dl</span>, <span style="color: #7fffd4;">cl</span> <span style="color: #ff7f24; font-style: italic;">; Move height to dl</span>

        <span style="color: #b0c4de;">shr</span> <span style="color: #7fffd4;">cx</span>, <span style="color: #8470ff; font-weight: bold;">8</span> <span style="color: #ff7f24; font-style: italic;">; Shift cx right 8 places, effcetively putting width in cl</span>


        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">cx</span> <span style="color: #ff7f24; font-style: italic;">; Save width</span>
<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">ds1</span>:
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Save sprite location + offset</span>
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">bx</span> <span style="color: #ff7f24; font-style: italic;">; Save current offset position</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">bx</span>, <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Move sprite location to bx</span>
        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">al</span>, [<span style="color: #7fffd4;">gs</span>:<span style="color: #7fffd4;">bx</span>] <span style="color: #ff7f24; font-style: italic;">; Move sprite's pixel value to al</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">bx</span> <span style="color: #ff7f24; font-style: italic;">; Reload bx with offset positon</span>
        <span style="color: #b0c4de;">cmp</span> <span style="color: #7fffd4;">al</span>, <span style="color: #8470ff; font-weight: bold;">0xFF</span> <span style="color: #ff7f24; font-style: italic;">; Check if pixel should be transparent</span>
        <span style="color: #b0c4de;">je</span> dssk <span style="color: #ff7f24; font-style: italic;">; If so, don't place the pixel</span>
        <span style="color: #b0c4de;">mov</span> [<span style="color: #7fffd4;">es</span>:<span style="color: #7fffd4;">bx</span>], <span style="color: #7fffd4;">al</span>
<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">dssk</span>:
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Restore sprite location + offset</span>
        <span style="color: #b0c4de;">inc</span> <span style="color: #7fffd4;">bx</span> <span style="color: #ff7f24; font-style: italic;">; increase offset in gfx buffer</span>
        <span style="color: #b0c4de;">inc</span> <span style="color: #7fffd4;">ax</span> <span style="color: #ff7f24; font-style: italic;">; Increase sprite offset</span>

        <span style="color: #b0c4de;">loop</span> ds1 <span style="color: #ff7f24; font-style: italic;">; Continue looping until done with this row of pixels in sprite</span>
        <span style="color: #b0c4de;">dec</span> <span style="color: #7fffd4;">dx</span> <span style="color: #ff7f24; font-style: italic;">; One less row to go</span>
        <span style="color: #b0c4de;">cmp</span> <span style="color: #7fffd4;">dx</span>, <span style="color: #8470ff; font-weight: bold;">0</span> <span style="color: #ff7f24; font-style: italic;">; Check if all rows done</span>
        <span style="color: #b0c4de;">jz</span> dsd <span style="color: #ff7f24; font-style: italic;">; Jump if done</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">cx</span> <span style="color: #ff7f24; font-style: italic;">; Restore sprite width</span>
        <span style="color: #b0c4de;">push</span> <span style="color: #7fffd4;">cx</span> <span style="color: #ff7f24; font-style: italic;">; Save sprite width</span>
        <span style="color: #b0c4de;">add</span> <span style="color: #7fffd4;">bx</span>, screen_width <span style="color: #ff7f24; font-style: italic;">; Add screen width to the offset, going to the next row</span>
        <span style="color: #b0c4de;">sub</span> <span style="color: #7fffd4;">bx</span>, <span style="color: #7fffd4;">cx</span> <span style="color: #ff7f24; font-style: italic;">; Subtract sprite width from bx, to arrive at the correct column</span>

        <span style="color: #b0c4de;">jmp</span> ds1

<span style="color: #00fa9a; font-size: 110%; font-weight: bold;">dsd</span>:    <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">cx</span>



        <span style="color: #b0c4de;">mov</span> <span style="color: #7fffd4;">sp</span>, <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">pop</span> <span style="color: #7fffd4;">bp</span>
        <span style="color: #b0c4de;">ret</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org9fac33f" class="outline-3">
<h3 id="org9fac33f">Drawing Animations</h3>
<div class="outline-text-3" id="text-org9fac33f">
<p>
How animations are drawn in <i>Kapow</i> will be explained in more detail in a later post.<br />
</p>
</div>
</div>
</div>
